// Code generated by protoc-gen-go. DO NOT EDIT.
// source: generator.proto

package generator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StartSpec struct {
	NumOfMessagePerSecond int32    `protobuf:"fixed32,1,opt,name=num_of_message_per_second,json=numOfMessagePerSecond,proto3" json:"num_of_message_per_second,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *StartSpec) Reset()         { *m = StartSpec{} }
func (m *StartSpec) String() string { return proto.CompactTextString(m) }
func (*StartSpec) ProtoMessage()    {}
func (*StartSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_25df606994424d60, []int{0}
}

func (m *StartSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartSpec.Unmarshal(m, b)
}
func (m *StartSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartSpec.Marshal(b, m, deterministic)
}
func (m *StartSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartSpec.Merge(m, src)
}
func (m *StartSpec) XXX_Size() int {
	return xxx_messageInfo_StartSpec.Size(m)
}
func (m *StartSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StartSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StartSpec proto.InternalMessageInfo

func (m *StartSpec) GetNumOfMessagePerSecond() int32 {
	if m != nil {
		return m.NumOfMessagePerSecond
	}
	return 0
}

func init() {
	proto.RegisterType((*StartSpec)(nil), "generator.StartSpec")
}

func init() { proto.RegisterFile("generator.proto", fileDescriptor_25df606994424d60) }

var fileDescriptor_25df606994424d60 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4f, 0xcd, 0x4b,
	0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x25, 0x92, 0x4a, 0xd3, 0xf4, 0x53, 0x73,
	0x0b, 0x4a, 0x2a, 0x21, 0xea, 0x94, 0x5c, 0xb9, 0x38, 0x83, 0x4b, 0x12, 0x8b, 0x4a, 0x82, 0x0b,
	0x52, 0x93, 0x85, 0x2c, 0xb8, 0x24, 0xf3, 0x4a, 0x73, 0xe3, 0xf3, 0xd3, 0xe2, 0x73, 0x53, 0x8b,
	0x8b, 0x13, 0xd3, 0x53, 0xe3, 0x0b, 0x52, 0x8b, 0xe2, 0x8b, 0x53, 0x93, 0xf3, 0xf3, 0x52, 0x24,
	0x18, 0x15, 0x18, 0x35, 0xf8, 0x83, 0x44, 0xf3, 0x4a, 0x73, 0xfd, 0xd3, 0x7c, 0x21, 0xd2, 0x01,
	0xa9, 0x45, 0xc1, 0x60, 0x49, 0xa3, 0x3a, 0x2e, 0x4e, 0x77, 0x98, 0x85, 0x42, 0xe6, 0x5c, 0xac,
	0x60, 0x33, 0x85, 0x44, 0xf4, 0x10, 0xce, 0x82, 0xdb, 0x22, 0x25, 0xa6, 0x07, 0x71, 0x90, 0x1e,
	0xcc, 0x41, 0x7a, 0xae, 0x20, 0x07, 0x29, 0x31, 0x08, 0x59, 0x70, 0xb1, 0x04, 0x97, 0xe4, 0x17,
	0x08, 0xe1, 0x50, 0x81, 0x5b, 0x67, 0x12, 0x1b, 0x58, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0xca, 0x40, 0xd1, 0x62, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeneratorClient is the client API for Generator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeneratorClient interface {
	// Start Generating stream of sensor
	Start(ctx context.Context, in *StartSpec, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop Generating stream of sensor
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type generatorClient struct {
	cc *grpc.ClientConn
}

func NewGeneratorClient(cc *grpc.ClientConn) GeneratorClient {
	return &generatorClient{cc}
}

func (c *generatorClient) Start(ctx context.Context, in *StartSpec, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/generator.Generator/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/generator.Generator/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneratorServer is the server API for Generator service.
type GeneratorServer interface {
	// Start Generating stream of sensor
	Start(context.Context, *StartSpec) (*empty.Empty, error)
	// Stop Generating stream of sensor
	Stop(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedGeneratorServer struct {
}

func (*UnimplementedGeneratorServer) Start(ctx context.Context, req *StartSpec) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedGeneratorServer) Stop(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterGeneratorServer(s *grpc.Server, srv GeneratorServer) {
	s.RegisterService(&_Generator_serviceDesc, srv)
}

func _Generator_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generator.Generator/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).Start(ctx, req.(*StartSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Generator_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generator.Generator/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generator.Generator",
	HandlerType: (*GeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Generator_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Generator_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generator.proto",
}
