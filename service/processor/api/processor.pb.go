// Code generated by protoc-gen-go. DO NOT EDIT.
// source: processor.proto

package processor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Sensor filter contains filter available to retrieve
// sensor data
type SensorFilter struct {
	Id1                  string               `protobuf:"bytes,1,opt,name=id1,proto3" json:"id1,omitempty"`
	Id2                  int32                `protobuf:"fixed32,2,opt,name=id2,proto3" json:"id2,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SensorFilter) Reset()         { *m = SensorFilter{} }
func (m *SensorFilter) String() string { return proto.CompactTextString(m) }
func (*SensorFilter) ProtoMessage()    {}
func (*SensorFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{0}
}

func (m *SensorFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorFilter.Unmarshal(m, b)
}
func (m *SensorFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorFilter.Marshal(b, m, deterministic)
}
func (m *SensorFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorFilter.Merge(m, src)
}
func (m *SensorFilter) XXX_Size() int {
	return xxx_messageInfo_SensorFilter.Size(m)
}
func (m *SensorFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SensorFilter proto.InternalMessageInfo

func (m *SensorFilter) GetId1() string {
	if m != nil {
		return m.Id1
	}
	return ""
}

func (m *SensorFilter) GetId2() int32 {
	if m != nil {
		return m.Id2
	}
	return 0
}

func (m *SensorFilter) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// A Sensor is generated in response to a Start rpc
//
// It contains value, type, and identifier to be later sent to processor
type Sensor struct {
	SensorValue          float32              `protobuf:"fixed32,1,opt,name=sensor_value,json=sensorValue,proto3" json:"sensor_value,omitempty"`
	SensorType           string               `protobuf:"bytes,2,opt,name=sensor_type,json=sensorType,proto3" json:"sensor_type,omitempty"`
	Id1                  string               `protobuf:"bytes,3,opt,name=id1,proto3" json:"id1,omitempty"`
	Id2                  int32                `protobuf:"fixed32,4,opt,name=id2,proto3" json:"id2,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Sensor) Reset()         { *m = Sensor{} }
func (m *Sensor) String() string { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()    {}
func (*Sensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_6783724e039e1aa6, []int{1}
}

func (m *Sensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sensor.Unmarshal(m, b)
}
func (m *Sensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sensor.Marshal(b, m, deterministic)
}
func (m *Sensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sensor.Merge(m, src)
}
func (m *Sensor) XXX_Size() int {
	return xxx_messageInfo_Sensor.Size(m)
}
func (m *Sensor) XXX_DiscardUnknown() {
	xxx_messageInfo_Sensor.DiscardUnknown(m)
}

var xxx_messageInfo_Sensor proto.InternalMessageInfo

func (m *Sensor) GetSensorValue() float32 {
	if m != nil {
		return m.SensorValue
	}
	return 0
}

func (m *Sensor) GetSensorType() string {
	if m != nil {
		return m.SensorType
	}
	return ""
}

func (m *Sensor) GetId1() string {
	if m != nil {
		return m.Id1
	}
	return ""
}

func (m *Sensor) GetId2() int32 {
	if m != nil {
		return m.Id2
	}
	return 0
}

func (m *Sensor) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*SensorFilter)(nil), "processor.SensorFilter")
	proto.RegisterType((*Sensor)(nil), "processor.Sensor")
}

func init() { proto.RegisterFile("processor.proto", fileDescriptor_6783724e039e1aa6) }

var fileDescriptor_6783724e039e1aa6 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0xa6, 0x06, 0x32, 0x2d, 0x54, 0xe7, 0xa0, 0x21, 0x1e, 0x1a, 0x73, 0xca, 0x29,
	0xd5, 0x88, 0xd4, 0x07, 0xb0, 0x7a, 0x95, 0x58, 0xbc, 0x96, 0xd6, 0x8e, 0x25, 0x90, 0xb8, 0xcb,
	0xee, 0x56, 0xc8, 0x2b, 0x79, 0xf6, 0x01, 0x65, 0x77, 0x4d, 0x2b, 0x06, 0x0f, 0xbd, 0xcd, 0x7e,
	0xf3, 0xcf, 0xfe, 0x3f, 0x33, 0x30, 0x12, 0x92, 0xbf, 0x92, 0x52, 0x5c, 0x66, 0x42, 0x72, 0xcd,
	0x31, 0xd8, 0x81, 0xe8, 0x62, 0xc3, 0xf9, 0xa6, 0xa2, 0x89, 0x6d, 0xac, 0xb6, 0x6f, 0x13, 0xaa,
	0x85, 0x6e, 0x9c, 0x2e, 0x1a, 0xff, 0x6d, 0xea, 0xb2, 0x26, 0xa5, 0x97, 0xb5, 0x70, 0x82, 0xa4,
	0x82, 0xe1, 0x33, 0xbd, 0x2b, 0x2e, 0x1f, 0xca, 0x4a, 0x93, 0xc4, 0x13, 0xf0, 0xca, 0xf5, 0x75,
	0xc8, 0x62, 0x96, 0x06, 0x85, 0x29, 0x1d, 0xc9, 0xc3, 0x5e, 0xcc, 0xd2, 0x91, 0x21, 0x39, 0xde,
	0x41, 0xb0, 0xfb, 0x26, 0xf4, 0x62, 0x96, 0x0e, 0xf2, 0x28, 0x73, 0x46, 0x59, 0x6b, 0x94, 0xcd,
	0x5b, 0x45, 0xb1, 0x17, 0x27, 0x9f, 0x0c, 0x7c, 0x67, 0x87, 0x97, 0x30, 0x54, 0xb6, 0x5a, 0x7c,
	0x2c, 0xab, 0x2d, 0x59, 0xc7, 0x5e, 0x31, 0x70, 0xec, 0xc5, 0x20, 0x1c, 0xc3, 0xcf, 0x73, 0xa1,
	0x1b, 0x41, 0x36, 0x41, 0x50, 0x80, 0x43, 0xf3, 0x46, 0x50, 0x1b, 0xd6, 0xeb, 0x84, 0xed, 0xff,
	0x13, 0xf6, 0xf8, 0x80, 0xb0, 0xf9, 0x17, 0x83, 0xe0, 0xa9, 0x5d, 0x33, 0x4e, 0xc1, 0x7b, 0x24,
	0x8d, 0xe7, 0xd9, 0xfe, 0x14, 0xbf, 0x17, 0x17, 0x9d, 0x76, 0x1a, 0xc9, 0x51, 0xca, 0xae, 0x18,
	0xde, 0x42, 0x7f, 0xb6, 0x2e, 0x35, 0x76, 0x05, 0xd1, 0x59, 0x27, 0xc8, 0xcc, 0xdc, 0xce, 0x0c,
	0xe2, 0x14, 0xfc, 0x7b, 0xaa, 0x48, 0xd3, 0x81, 0x83, 0x2b, 0xdf, 0xb2, 0x9b, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x43, 0x15, 0xc1, 0x82, 0x34, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorClient interface {
	// Get returns stream of sensor to be later used for analytics
	Get(ctx context.Context, opts ...grpc.CallOption) (Processor_GetClient, error)
	Edit(ctx context.Context, opts ...grpc.CallOption) (Processor_EditClient, error)
	Delete(ctx context.Context, opts ...grpc.CallOption) (Processor_DeleteClient, error)
}

type processorClient struct {
	cc *grpc.ClientConn
}

func NewProcessorClient(cc *grpc.ClientConn) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Get(ctx context.Context, opts ...grpc.CallOption) (Processor_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Processor_serviceDesc.Streams[0], "/processor.Processor/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorGetClient{stream}
	return x, nil
}

type Processor_GetClient interface {
	Send(*SensorFilter) error
	Recv() (*Sensor, error)
	grpc.ClientStream
}

type processorGetClient struct {
	grpc.ClientStream
}

func (x *processorGetClient) Send(m *SensorFilter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorGetClient) Recv() (*Sensor, error) {
	m := new(Sensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorClient) Edit(ctx context.Context, opts ...grpc.CallOption) (Processor_EditClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Processor_serviceDesc.Streams[1], "/processor.Processor/Edit", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorEditClient{stream}
	return x, nil
}

type Processor_EditClient interface {
	Send(*Sensor) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type processorEditClient struct {
	grpc.ClientStream
}

func (x *processorEditClient) Send(m *Sensor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorEditClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorClient) Delete(ctx context.Context, opts ...grpc.CallOption) (Processor_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Processor_serviceDesc.Streams[2], "/processor.Processor/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorDeleteClient{stream}
	return x, nil
}

type Processor_DeleteClient interface {
	Send(*Sensor) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type processorDeleteClient struct {
	grpc.ClientStream
}

func (x *processorDeleteClient) Send(m *Sensor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorDeleteClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
type ProcessorServer interface {
	// Get returns stream of sensor to be later used for analytics
	Get(Processor_GetServer) error
	Edit(Processor_EditServer) error
	Delete(Processor_DeleteServer) error
}

// UnimplementedProcessorServer can be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (*UnimplementedProcessorServer) Get(srv Processor_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedProcessorServer) Edit(srv Processor_EditServer) error {
	return status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedProcessorServer) Delete(srv Processor_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).Get(&processorGetServer{stream})
}

type Processor_GetServer interface {
	Send(*Sensor) error
	Recv() (*SensorFilter, error)
	grpc.ServerStream
}

type processorGetServer struct {
	grpc.ServerStream
}

func (x *processorGetServer) Send(m *Sensor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorGetServer) Recv() (*SensorFilter, error) {
	m := new(SensorFilter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Processor_Edit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).Edit(&processorEditServer{stream})
}

type Processor_EditServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Sensor, error)
	grpc.ServerStream
}

type processorEditServer struct {
	grpc.ServerStream
}

func (x *processorEditServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorEditServer) Recv() (*Sensor, error) {
	m := new(Sensor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Processor_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).Delete(&processorDeleteServer{stream})
}

type Processor_DeleteServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Sensor, error)
	grpc.ServerStream
}

type processorDeleteServer struct {
	grpc.ServerStream
}

func (x *processorDeleteServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorDeleteServer) Recv() (*Sensor, error) {
	m := new(Sensor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processor.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Processor_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Edit",
			Handler:       _Processor_Edit_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _Processor_Delete_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "processor.proto",
}
